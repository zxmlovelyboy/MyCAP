<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetCore.CAP</name>
    </assembly>
    <members>
        <member name="T:DotNetCore.CAP.CapMarkerService">
            <summary>
            Used to verify cap service was called on a ServiceCollection
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.CapStorageMarkerService">
            <summary>
            Used to verify cap storage extension was added on a ServiceCollection
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.CapMessageQueueMakerService">
            <summary>
            Used to verify cap message queue extension was added on a ServiceCollection
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.CapBuilder">
            <summary>
            Allows fine grained configuration of CAP services.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapBuilder.Services">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> where MVC services are configured.
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.CapBuilder.AddProducerService``1">
            <summary>
            Add an <see cref="T:DotNetCore.CAP.ICapPublisher" />.
            </summary>
            <typeparam name="T">The type of the service.</typeparam>
        </member>
        <member name="M:DotNetCore.CAP.CapBuilder.AddScoped(System.Type,System.Type)">
            <summary>
            Adds a scoped service of the type specified in serviceType with an implementation
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.CapBuilder.AddSingleton(System.Type,System.Type)">
            <summary>
            Adds a singleton service of the type specified in serviceType with an implementation
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.CapOptions">
            <summary>
            Represents all the options you can use to configure the system.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.DefaultGroup">
            <summary>
            Subscriber default group name. kafka-->group name. rabbitmq --> queue name.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.Version">
            <summary>
            The default version of the message, configured to isolate data in the same instance. The length must not exceed 20
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.SucceedMessageExpiredAfter">
            <summary>
            Sent or received succeed message after time span of due, then the message will be deleted at due time.
            Default is 24*3600 seconds.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.FailedRetryInterval">
            <summary>
            Failed messages polling delay time.
            Default is 60 seconds.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.FailedThresholdCallback">
            <summary>
            We’ll invoke this call-back with message type,name,content when retry failed (send or executed) messages equals <see cref="P:DotNetCore.CAP.CapOptions.FailedRetryCount"/> times.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.FailedRetryCount">
            <summary>
            The number of message retries, the retry will stop when the threshold is reached.
            Default is 50 times.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.ConsumerThreadCount">
            <summary>
            The number of consumer thread connections.
            Default is 1
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.CapOptions.ProducerThreadCount">
            <summary>
            The number of producer thread connections.
            Default is 1
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.CapOptions.RegisterExtension(DotNetCore.CAP.ICapOptionsExtension)">
            <summary>
            Registers an extension that will be executed when building services.
            </summary>
            <param name="extension"></param>
        </member>
        <member name="T:DotNetCore.CAP.Diagnostics.CapDiagnosticListenerNames">
            <summary>
            Extension methods on the DiagnosticListener class to log CAP data
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.ICapOptionsExtension">
            <summary>
            Cap options extension
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.ICapOptionsExtension.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registered child service.
            </summary>
            <param name="services">add service to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /></param>
        </member>
        <member name="T:DotNetCore.CAP.ICapPublisher">
            <summary>
            A publish service for publish a message to CAP.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.ICapPublisher.Transaction">
            <summary>
            CAP transaction context object
            </summary>  
        </member>
        <member name="M:DotNetCore.CAP.ICapPublisher.PublishAsync``1(System.String,``0,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronous publish an object message.
            </summary>
            <param name="name">the topic name or exchange router key.</param>
            <param name="contentObj">message body content, that will be serialized. (can be null)</param>
            <param name="callbackName">callback subscriber name</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:DotNetCore.CAP.ICapPublisher.PublishAsync``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronous publish an object message with custom headers
            </summary>
            <typeparam name="T">content object</typeparam>
            <param name="name">the topic name or exchange router key.</param>
            <param name="contentObj">message body content, that will be serialized. (can be null)</param>
            <param name="headers">message additional headers.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:DotNetCore.CAP.ICapPublisher.Publish``1(System.String,``0,System.String)">
            <summary>
            Publish an object message.
            </summary>
            <param name="name">the topic name or exchange router key.</param>
            <param name="contentObj">message body content, that will be serialized. (can be null)</param>
            <param name="callbackName">callback subscriber name</param>
        </member>
        <member name="M:DotNetCore.CAP.ICapPublisher.Publish``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Publish an object message.
            </summary>
            <param name="name">the topic name or exchange router key.</param>
            <param name="contentObj">message body content, that will be serialized. (can be null)</param>
            <param name="headers">message additional headers.</param>
        </member>
        <member name="T:DotNetCore.CAP.ICapSubscribe">
            <summary>
            An empty interface, which is used to mark the current class have a CAP subscriber methods.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.ICapTransaction">
            <summary>
            CAP transaction wrapper, used to wrap database transactions, provides a consistent user interface
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.ICapTransaction.AutoCommit">
            <summary>
            A flag is used to indicate whether the transaction is automatically committed after the message is published
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.ICapTransaction.DbTransaction">
            <summary>
            Database transaction object, can be converted to a specific database transaction object or IDBTransaction when used
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.ICapTransaction.Commit">
            <summary>
            Submit the transaction context of the CAP, we will send the message to the message queue at the time of submission
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.ICapTransaction.Rollback">
            <summary>
            We will delete the message data that has not been sstore in the buffer data of current transaction context.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.ConsumerContext">
            <summary>
            A context for consumers, it used to be provider wrapper of method description and received message.
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Internal.ConsumerContext.#ctor(DotNetCore.CAP.Internal.ConsumerExecutorDescriptor,DotNetCore.CAP.Messages.Message)">
            <summary>
            create a new instance of  <see cref="T:DotNetCore.CAP.Internal.ConsumerContext" /> .
            </summary>
            <param name="descriptor">consumer method descriptor. </param>
            <param name="message"> received message.</param>
        </member>
        <member name="P:DotNetCore.CAP.Internal.ConsumerContext.ConsumerDescriptor">
            <summary>
            a descriptor of consumer information need to be performed.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Internal.ConsumerContext.DeliverMessage">
            <summary>
            consumer received message.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor">
            <summary>
            A descriptor of user definition method.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor.TopicName">
            <summary>
            Topic name based on both <see cref="P:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor.Attribute"/> and <see cref="P:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor.ClassAttribute"/>.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.IBootstrapper">
            <summary>
            Represents bootstrapping logic. For example, adding initial state to the storage or querying certain entities.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.Bootstrapper">
            <summary>
            Default implement of <see cref="T:DotNetCore.CAP.Internal.IBootstrapper" />.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.IConsumerRegister">
            <summary>
            Handler received message of subscribed.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.IConsumerServiceSelector">
            <summary>
            Defines an interface for selecting an consumer service method to invoke for the current message.
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Internal.IConsumerServiceSelector.SelectCandidates">
            <summary>
            Selects a set of <see cref="T:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor" /> candidates for the current message associated with
            </summary>
            <returns>A set of <see cref="T:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor" /> candidates or <c>null</c>.</returns>
        </member>
        <member name="M:DotNetCore.CAP.Internal.IConsumerServiceSelector.SelectBestCandidate(System.String,System.Collections.Generic.IReadOnlyList{DotNetCore.CAP.Internal.ConsumerExecutorDescriptor})">
            <summary>
            Selects the best <see cref="T:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor" /> candidate from <paramref name="candidates" /> for the
            current message associated.
            </summary>
            <param name="key">topic or exchange router key.</param>
            <param name="candidates">the set of <see cref="T:DotNetCore.CAP.Internal.ConsumerExecutorDescriptor" /> candidates.</param>
        </member>
        <member name="T:DotNetCore.CAP.Internal.ConsumerServiceSelector">
            <inheritdoc />
            <summary>
            A default <see cref="T:DotNetCore.CAP.Abstractions.IConsumerServiceSelector" /> implementation.
            </summary>
        </member>
        <member name="F:DotNetCore.CAP.Internal.ConsumerServiceSelector._asteriskList">
            <summary>
            since this class be designed as a Singleton service,the following two list must be thread safe!
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Internal.ConsumerServiceSelector.#ctor(System.IServiceProvider)">
            <summary>
            Creates a new <see cref="T:DotNetCore.CAP.Internal.ConsumerServiceSelector" />.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.IProcessingServer">
            <inheritdoc />
            <summary>
            A process thread abstract of message process.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.ISubscribeDispatcher">
            <summary>
            Consumer executor
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.ISubscribeInvoker">
            <summary>
            Perform user definition method of consumers.
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Internal.ISubscribeInvoker.InvokeAsync(DotNetCore.CAP.Internal.ConsumerContext,System.Threading.CancellationToken)">
            <summary>
            Invoke subscribe method with the consumer context.
            </summary>
            <param name="context">consumer execute context</param>
            <param name="cancellationToken">The object of <see cref="T:System.Threading.CancellationToken"/>.</param>
        </member>
        <member name="M:DotNetCore.CAP.Internal.MethodMatcherCache.GetCandidatesMethodsOfGroupNameGrouped">
            <summary>
            Get a dictionary of candidates.In the dictionary,
            the Key is the CAPSubscribeAttribute Group, the Value for the current Group of candidates
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Internal.MethodMatcherCache.TryGetTopicExecutor(System.String,System.String,DotNetCore.CAP.Internal.ConsumerExecutorDescriptor@)">
            <summary>
            Attempts to get the topic executor associated with the specified topic name and group name from the
            <see cref="P:DotNetCore.CAP.Internal.MethodMatcherCache.Entries" />.
            </summary>
            <param name="topicName">The topic name of the value to get.</param>
            <param name="groupName">The group name of the value to get.</param>
            <param name="matchTopic">topic executor of the value.</param>
            <returns>true if the key was found, otherwise false. </returns>
        </member>
        <member name="T:DotNetCore.CAP.Internal.SnowflakeId">
            <summary>
            雪崩场景
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Internal.SnowflakeId.TimeGen">
            <summary>
            生成时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetCore.CAP.Internal.StatusName">
            <summary>
            The message status name.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Internal.TopicAttribute">
            <inheritdoc />
            <summary>
            An abstract attribute that for kafka attribute or rabbit mq attribute
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Internal.TopicAttribute.Name">
            <summary>
            Topic or exchange route key name.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Internal.TopicAttribute.IsPartial">
            <summary>
            Defines wether this attribute defines a topic subscription partial.
            The defined topic will be combined with a topic subscription defined on class level,
            which results for example in subscription on "class.method".
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Internal.TopicAttribute.Group">
            <summary>
            Default group name is CapOptions setting.(Assembly name)
            kafka --> groups.id
            rabbit MQ --> queue.name
            </summary>
        </member>
        <member name="F:DotNetCore.CAP.Messages.Headers.MessageId">
            <summary>
            Id of the message. Either set the ID explicitly when sending a message, or assign one to the message.
            </summary>
        </member>
        <member name="F:DotNetCore.CAP.Messages.Headers.Type">
            <summary>
            Message value .NET type
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Messages.Message.#ctor">
            <summary>
            System.Text.Json requires that class explicitly has a parameterless constructor
            and public properties have a setter.
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Messages.TransportMessage">
            <summary>
            Message content field
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Messages.TransportMessage.Headers">
            <summary>
            Gets the headers of this message
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.Messages.TransportMessage.Body">
            <summary>
            Gets the body object of this message
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.OperateResult">
            <summary>
            Represents the result of an consistent message operation.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.OperateResult.Succeeded">
            <summary>
            Flag indicating whether if the operation succeeded or not.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.OperateResult.Errors">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:DotNetCore.CAP.OperateError" />s containing an errors
            that occurred during the operation.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:DotNetCore.CAP.OperateError" />s.</value>
        </member>
        <member name="P:DotNetCore.CAP.OperateResult.Success">
            <summary>
            Returns an <see cref="T:DotNetCore.CAP.OperateResult" /> indicating a successful identity operation.
            </summary>
            <returns>An <see cref="T:DotNetCore.CAP.OperateResult" /> indicating a successful operation.</returns>
        </member>
        <member name="M:DotNetCore.CAP.OperateResult.Failed(DotNetCore.CAP.OperateError[])">
            <summary>
            Creates an <see cref="T:DotNetCore.CAP.OperateResult" /> indicating a failed operation, with a list of <paramref name="errors" /> if
            applicable.
            </summary>
            <param name="errors">An optional array of <see cref="T:DotNetCore.CAP.OperateError" />s which caused the operation to fail.</param>
            <returns>
            An <see cref="T:DotNetCore.CAP.OperateResult" /> indicating a failed operation, with a list of <paramref name="errors" /> if
            applicable.
            </returns>
        </member>
        <member name="M:DotNetCore.CAP.OperateResult.ToString">
            <summary>
            Converts the value of the current <see cref="T:DotNetCore.CAP.OperateResult" /> object to its equivalent string representation.
            </summary>
            <returns>A string representation of the current <see cref="T:DotNetCore.CAP.OperateResult" /> object.</returns>
            <remarks>
            If the operation was successful the ToString() will return "Succeeded" otherwise it returned
            "Failed : " followed by a comma delimited list of error codes from its <see cref="P:DotNetCore.CAP.OperateResult.Errors" /> collection, if any.
            </remarks>
        </member>
        <member name="T:DotNetCore.CAP.OperateError">
            <summary>
            Encapsulates an error from the operate subsystem.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.OperateError.Code">
            <summary>
            Gets or sets ths code for this error.
            </summary>
        </member>
        <member name="P:DotNetCore.CAP.OperateError.Description">
            <summary>
            Gets or sets the description for this error.
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Serialization.ISerializer.Serialize(DotNetCore.CAP.Messages.Message)">
            <summary>
            Serializes the given <see cref="T:DotNetCore.CAP.Messages.Message"/> into a string
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Serialization.ISerializer.SerializeAsync(DotNetCore.CAP.Messages.Message)">
            <summary>
            Serializes the given <see cref="T:DotNetCore.CAP.Messages.Message"/> into a <see cref="T:DotNetCore.CAP.Messages.TransportMessage"/>
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Serialization.ISerializer.Deserialize(System.String)">
            <summary>
            Deserialize the given string into a <see cref="T:DotNetCore.CAP.Messages.Message"/>
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Serialization.ISerializer.DeserializeAsync(DotNetCore.CAP.Messages.TransportMessage,System.Type)">
            <summary>
            Deserialize the given <see cref="T:DotNetCore.CAP.Messages.TransportMessage"/> back into a <see cref="T:DotNetCore.CAP.Messages.Message"/>
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Serialization.ISerializer.Deserialize(System.Object,System.Type)">
            <summary>
            Deserialize the given object with the given Type into an object
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Serialization.ISerializer.IsJsonType(System.Object)">
            <summary>
            Check if the given object is of Json type, e.g. JToken or JsonElement
            depending on the type of serializer implemented
            </summary>
            <example>
            <code>
            // Example implementation for System.Text.Json
            public bool IsJsonType(object jsonObject)
            {
               return jsonObject is JsonElement;
            }
            </code>
            </example>
        </member>
        <member name="T:DotNetCore.CAP.Transport.IConsumerClient">
            <inheritdoc />
            <summary>
            Message queue consumer client
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Transport.IConsumerClient.Subscribe(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Subscribe to a set of topics to the message queue
            </summary>
            <param name="topics"></param>
        </member>
        <member name="M:DotNetCore.CAP.Transport.IConsumerClient.Listening(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Start listening
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Transport.IConsumerClient.Commit(System.Object)">
            <summary>
            Manual submit message offset when the message consumption is complete
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Transport.IConsumerClient.Reject(System.Object)">
            <summary>
            Reject message and resumption
            </summary>
        </member>
        <member name="T:DotNetCore.CAP.Transport.IConsumerClientFactory">
            <summary>
            Consumer client factory to create consumer client instance.
            </summary>
        </member>
        <member name="M:DotNetCore.CAP.Transport.IConsumerClientFactory.Create(System.String)">
            <summary>
            Create a new instance of <see cref="T:DotNetCore.CAP.Transport.IConsumerClient" />.
            </summary>
            <param name="groupId">message group number</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Contains extension methods to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> for configuring consistence services.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddCap(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{DotNetCore.CAP.CapOptions})">
            <summary>
            Adds and configures the consistence services for the consistency.
            </summary>
            <param name="services">The services available in the application.</param>
            <param name="setupAction">An action to configure the <see cref="T:DotNetCore.CAP.CapOptions" />.</param>
            <returns>An <see cref="T:DotNetCore.CAP.CapBuilder" /> for application services.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.Execute(System.Object,System.Object[])">
            <summary>
            Executes the configured method on <paramref name="target" />. This can be used whether or not
            the configured method is asynchronous.
            </summary>
            <remarks>
            Even if the target method is asynchronous, it's desirable to invoke it using Execute rather than
            ExecuteAsync if you know at compile time what the return type is, because then you can directly
            "await" that value (via a cast), and then the generated code will be able to reference the
            resulting awaitable as a value-typed variable. If you use ExecuteAsync instead, the generated
            code will have to treat the resulting awaitable as a boxed object, because it doesn't know at
            compile time what type it would be.
            </remarks>
            <param name="target">The object whose method is to be executed.</param>
            <param name="parameters">Parameters to pass to the method.</param>
            <returns>The method return value.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])">
            <summary>
            Executes the configured method on <paramref name="target" />. This can only be used if the configured
            method is asynchronous.
            </summary>
            <remarks>
            If you don't know at compile time the type of the method's returned awaitable, you can use ExecuteAsync,
            which supplies an awaitable-of-object. This always works, but can incur several extra heap allocations
            as compared with using Execute and then using "await" on the result value typecasted to the known
            awaitable type. The possible extra heap allocations are for:
            1. The custom awaitable (though usually there's a heap allocation for this anyway, since normally
            it's a reference type, and you normally create a new instance per call).
            2. The custom awaiter (whether or not it's a value type, since if it's not, you need a new instance
            of it, and if it is, it will have to be boxed so the calling code can reference it as an object).
            3. The async result value, if it's a value type (it has to be boxed as an object, since the calling
            code doesn't know what type it's going to be).
            </remarks>
            <param name="target">The object whose method is to be executed.</param>
            <param name="parameters">Parameters to pass to the method.</param>
            <returns>An object that you can "await" to get the method return value.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorAwaitable">
            <summary>
            Provides a common awaitable structure that <see cref="M:Microsoft.Extensions.Internal.ObjectMethodExecutor.ExecuteAsync(System.Object,System.Object[])" /> can
            return, regardless of whether the underlying value is a System.Task, an FSharpAsync, or an
            application-defined custom awaitable.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Internal.ObjectMethodExecutorFSharpSupport">
            <summary>
            Helper for detecting whether a given type is FSharpAsync`1, and if so, supplying
            an <see cref="T:System.Linq.Expressions.Expression" /> for mapping instances of that type to a C# awaitable.
            </summary>
            <remarks>
            The main design goal here is to avoid taking a compile-time dependency on
            FSharp.Core.dll, because non-F# applications wouldn't use it. So all the references
            to FSharp types have to be constructed dynamically at runtime.
            </remarks>
        </member>
    </members>
</doc>
